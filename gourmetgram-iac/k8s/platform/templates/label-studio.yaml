#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: minio-pvc
#  namespace: gourmetgram-platform
#spec:
#  accessModes:
#    - ReadWriteOnce
#  resources:
#    requests:
#      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: label-studio
  namespace: gourmetgram-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: label-studio
  template:
    metadata:
      labels:
        app: label-studio
    spec:
      containers:
        - name: label-studio
          image: heartexlabs/label-studio:1.16.0
#          args: ["server", "/data", "--console-address", ":9001"]
          ports:
            - containerPort: 9090
            - containerPort: 9090
          env:
            - name: LABEL_STUDIO_URL
            - value: http://label-studio:8080

            - name: LABEL_STUDIO_USERNAME
            - value: labelstudio@example.com

            - name: LABEL_STUDIO_USER_TOKEN
            - value: ab9927067c51ff279d340d7321e4890dc2841c4a

            - name : POSTGRES_HOST
            - value: app-db

            - name : POSTGRES_PORT
            - value : 5432

            - name : POSTGRES_USER
            - value : user

            - name : POSTGRES_PASSWORD
            - value : password

            - name : POSTGRES_DB
            - value : appdb

          volumeMounts:
            - name: label-studio
              mountPath: /label-studio/scripts
      volumes:
        - name: label-studio
          persistentVolumeClaim:
            claimName: label-studio
---
apiVersion: v1
kind: Service
metadata:
  name: label-studio
  namespace: gourmetgram-platform
spec:
  selector:
    app: label-studio
  ports:
    - port: 9090
      targetPort: 9090
#  ports:
#    - name: api
#      port: 9000
#      targetPort: 9000
#    - name: console
#      port: 9001
#      targetPort: 9001
  externalIPs:
    - {{ .Values.label-studio.externalIP }}
#---
#apiVersion: batch/v1
#kind: Job
#metadata:
#  name: minio-create-bucket
#  namespace: gourmetgram-platform
#  annotations:
#    argocd.argoproj.io/hook: PostSync
#    argocd.argoproj.io/hook-delete-policy: HookSucceeded
#spec:
#  backoffLimit: 3
#  ttlSecondsAfterFinished: 60
#  template:
#    spec:
#      containers:
#        - name: mc
#          image: minio/mc
#          env:
#            - name: MINIO_ACCESS_KEY
#              valueFrom:
#                secretKeyRef:
#                  name: minio-credentials
#                  key: accesskey
#            - name: MINIO_SECRET_KEY
#              valueFrom:
#                secretKeyRef:
#                  name: minio-credentials
#                  key: secretkey
#          command: ["/bin/sh", "-c"]
#          args:
#            - |
#              until mc alias set minio http://minio:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY; do
#                echo "Waiting for MinIO...";
#                sleep 5;
#              done
#              if ! mc ls minio/mlflow-artifacts; then
#                mc mb minio/mlflow-artifacts;
#              else
#                echo "Bucket already exists.";
#              fi
#      restartPolicy: OnFailure
