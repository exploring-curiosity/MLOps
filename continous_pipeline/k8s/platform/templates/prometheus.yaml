---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: gourmetgram-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: gourmetgram-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          #          args: ["server", "/data", "--console-address", ":9001"]
          ports:
            - containerPort: 4000
            - containerPort: 4000
          #          env:
          #            - name: MINIO_ROOT_USER
          #              valueFrom:
          #                secretKeyRef:
          #                  name: minio-credentials
          #                  key: accesskey
          #            - name: MINIO_ROOT_PASSWORD
          #              valueFrom:
          #                secretKeyRef:
          #                  name: minio-credentials
          #                  key: secretkey
          volumeMounts:
            - name: prometheus-storage
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: gourmetgram-platform
spec:
  selector:
    app: prometheus
  ports:
    - port: 4000
      targetPort: 4000
  externalIPs:
    - {{ .Values.prometheus.externalIP }}
#---
#apiVersion: batch/v1
#kind: Job
#metadata:
#  name: minio-create-bucket
#  namespace: gourmetgram-platform
#  annotations:
#    argocd.argoproj.io/hook: PostSync
#    argocd.argoproj.io/hook-delete-policy: HookSucceeded
#spec:
#  backoffLimit: 3
#  ttlSecondsAfterFinished: 60
#  template:
#    spec:
#      containers:
#        - name: mc
#          image: minio/mc
#          env:
#            - name: MINIO_ACCESS_KEY
#              valueFrom:
#                secretKeyRef:
#                  name: minio-credentials
#                  key: accesskey
#            - name: MINIO_SECRET_KEY
#              valueFrom:
#                secretKeyRef:
#                  name: minio-credentials
#                  key: secretkey
#          command: ["/bin/sh", "-c"]
#          args:
#            - |
#              until mc alias set minio http://minio:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY; do
#                echo "Waiting for MinIO...";
#                sleep 5;
#              done
#              if ! mc ls minio/mlflow-artifacts; then
#                mc mb minio/mlflow-artifacts;
#              else
#                echo "Bucket already exists.";
#              fi
#      restartPolicy: OnFailure